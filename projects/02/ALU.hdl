// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
    // Put you code here:
    Mux16(a[0..15]=x[0..15], b[0..15]=false, sel=zx, out[0..15]=outzx); // Select between x or zero.
    Not16(in[0..15]=outzx, out[0..15]=notx); // Provide a Negate x output.
    Mux16(a[0..15]=outzx, b[0..15]=notx, sel=nx, out[0..15]=outnx); // Select between x or Negate x.

    Mux16(a[0..15]=y[0..15], b[0..15]=false, sel=zy, out[0..15]=outzy); // Select between y or zero.
    Not16(in[0..15]=outzy, out[0..15]=noty); // Provide a Negate y output.
    Mux16(a[0..15]=outzy, b[0..15]=noty, sel=ny, out[0..15]=outny); // Select between y or Negate y.

    And16(a[0..15]=outnx, b[0..15]=outny, out=xandy); // Provide a x AND y output.
    Add16(a[0..15]=outnx, b[0..15]=outny, out=xplusy); // Provide a x + y output.
    Mux16(a[0..15]=xandy, b[0..15]=xplusy, sel=f, out[0..15]=xfy); // Select between x ANd y or x + y.

    Not16(in[0..15]=xfy, out[0..15]=nxfy); // Provide a Negate xy output.
    Mux16(a[0..15]=xfy, b[0..15]=nxfy, sel=no, out[0..7]=finalOutput1, out[8..15]=finalOutput2, out[0..15]=out[0..15], out[15]=ng); // Select between xy or Negate xy. Provide the output for the OUT Gate and provide output for the split output out[0..7] and out[8..15].
    // Mux16(a[0..15]=xfy, b[0..15]=nxfy, sel=no, out[0..15]=out[0..15]);
    // Or16(a[0..7]=finalOutput1, a[8..15]=finalOutput2, b[0..15]=false, out[15]=ng, out[0..15]=out[0..15]);
    

    // Or16(a[0..7]=finalOutput1, a[8..15]=finalOutput2, b[0..15]=false, out[0]=ng);
    // Check to see if output equals zero.
    Or8Way(in[0..7]=finalOutput1, out=orOutput1); // Or the first 8 bits of the output.
    Or8Way(in[0..7]=finalOutput2, out=orOutput2); // Or the last 8 bits of the output.
    Or(a=orOutput1, b=orOutput2, out=notorOutput); // Or the 2 outputs of the 8Way Or Gates.
    Not(in=notorOutput, out=zr); // Not the Or Gate Output.
}

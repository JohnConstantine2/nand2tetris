// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:
    // Multiplexer to select between instruction input or ALU Output.
    Mux16(a[0..14]=instruction[0..14], a[15]=false, b=outAlu, sel=instruction[15], out=outMux1);

    // Register for the A Register.
    Not(in=instruction[15], out=notOpCode);
    Or(a=notOpCode, b=instruction[5], out=outALoad);
    ARegister(in=outMux1, load=outALoad, out=outAReg, out[0..14]=addressM);

    // Multiplexer to select between A Register output or RAM/M Register input.
    Mux16(a=outAReg, b=inM, sel=instruction[12], out=outMux2);

    // Register for the D Register.
    And(a=instruction[15], b=instruction[4], out=outDLoad);
    DRegister(in=outAlu, load=outDLoad, out=outDReg);

    ALU(x=outDReg, y=outMux2, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=outM, out=outAlu, zr=zr, ng=ng);

    // Route the 13th bit of the instruction code to the writeM output.
    And(a=instruction[15], b=instruction[3], out=writeM);
    // Not(in=outNot, out=writeM);

    // If zr=0 and ng=0.
    Or(a=zr, b=ng, out=orA);
    Not(in=orA, out=notA);

    // If zr=1 and ng=0.
    Not(in=ng, out=notB);
    And(a=zr, b=notB, out=andB);
    
    // If ng=0.
    Not(in=ng, out=notC);

    // If zr=0 and ng=1.
    Not(in=zr, out=notD);
    And(a=notD, b=ng, out=andD);

    // If zr=0.
    Not(in=zr, out=notE);

    // If zr=0 and ng=1 or zr=1 and ng=0.
    Xor(a=zr, b=ng, out=xorF);

    Mux8Way16(a[0]=false, b[0]=notA, c[0]=andB, d[0]=notC, e[0]=andD, f[0]=notE, g[0]=xorF, h[0]=true, sel=instruction[0..2], out[0]=outMuxJmp);
    Not(in=outMuxJmp, out=outNotJmp);
    And(a=outMuxJmp, b=instruction[15], out=outLoad);
    And(a=outNotJmp, b=instruction[15], out=outInc);

    PC(in=outAReg, reset=reset, load=outLoad, inc=true, out[0..14]=pc);



}